defenitions:

take n _ | n <=0 = []
take _ [] = []
take n (x:xs) = x : take (n - 1) xs

repete x = x : repete x

take 3 (repete "hello")
  1.
  let s = "hello"
  in let ss = repete s
  in take 3 ss

  2.
  let s = "hello"
  in let ss1 = repete s
  in let ss = s:ss1
  in take 3 ss

  3.
  let s = "hello"
  in let ss1 = repete s
  in take 3 (s:ss1)

  4.
  let s = "hello"
  in let ss1 = repete s
  in s : take 2 ss1

  5.
  let s = "hello"
  in let ss2 = repete s
  in let ss1 = s:ss2
  in s:take 2 ss1

  6.
  let s = "hello"
  in let ss2 = repete s
  in s : take 2 (s:ss2)

  7.
  let s = "hello"
  in let ss2 = repete s
  in s : s : take 1 ss2

  8.
  let s = "hello"
  in let ss3 = repete s
  in let ss2 = s : ss3
  in s : s : take 1 ss2

  9.
  let s = "hello"
  in let ss3 = repete s
  in s : s : take 1 (s : ss3)

  10.
  let s = "hello"
  in let ss3 = repete s
  in s : s : s : take 0 ss3

  11.
  let s = "hello"
  in let ss3 = repete s
  in s : s : s : []
    -take.1

  12.
  let s = "hello"
  in s : s : s

(++) [] ys = ys
(++) (x:xs) ys = x : (xs ++ ys)

cycle [] = error "..."
cycle xs = xs ++ cycle xs

reverse [] = []
reverse (x:xs) = reverse xs ++ [x]

[] !! _ = error "..."
(x:xs) !! n | n <= 0 = x
            | otherwise = xs !! (n - 1)

reverse (cycle [1,2,3]) !! 2
1.
  let xs = [1,2,3]
  in let ys = cycle xs
  in let sy =-reverse ys
  in sy !! 2

2.
  let xs1 = [2,3]
  in let xs = 1:xs1
  in let ys = cycle xs
  in let sy = reverse ys
  in sy !! 2

3.
  let xs1 = [2,3]
  in let ys = cycle 1:xs1
  in let sy = reverse ys
  in sy !! 2

4.
  let xs1 = [2,3]
  in let ys` = cycle (1:xs1)
  in let ys = 1:xs1 ++ ys`
  in let sy = reverse ys
  in sy !! 2

5.
  let xs1 = [2,3]

